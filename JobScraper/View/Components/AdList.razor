@using JobScraper.Model.Data;
@using JobScraper.Model.Filter;
@using JobScraper.Utils;
@using JobScraper.ViewModel;
@using JobScraper.ViewModel.EventArgs;

<ul class="list-group" style="padding-right: 10px; margin-top: 10px; overflow-y: hidden; -webkit-overflow-scrolling: touch;">
    @foreach(Ad ad in ads)
    {
        <a href="#" @onclick='() => { OpenTarget(ad.URL); }' class="list-group-item list-group-item-light border-1 rounded-3 mb-2 ad-container">
            <div class="ad-content fw-bold fs-6">
                @if (ad.Company == String.Empty)
                {
                    <span>N/A</span>
                }
                else
                {
                    @ad.Company
                }
            </div>

            <div class="ad-content">
                @ad.Title
            </div>

            <div class="ad-content">
                @foreach (Keyword keyword in ad.Keywords)
                {
                    @if (keyword.type == Keyword.Type.Must)
                    {
                        <span class="badge bg-success keyword">@keyword.text</span>
                    }
                    else if (keyword.type == Keyword.Type.Should)
                    {
                        <span class="badge bg-warning keyword">@keyword.text</span>
                    }
                }
            </div>
        </a>
    }
</ul>

@code {
    public List<Ad> ads { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ads = new List<Ad>();
        
        PubSub.Get().Subscribe(Topics.AD_PROCESSED, AdProcessed);
    }

    private void AdProcessedHandler(object? sender, AdListArgs args)
    {
        ads = args.ads;
        InvokeAsync(StateHasChanged);
    }

    private void AdProcessed(dynamic data)
    {
        AdListArgs args = data as AdListArgs;

        ads = args.ads;
        InvokeAsync(StateHasChanged);
    }

    private async void OpenTarget(string URL)
    {
        OpenTargetArgs args = new OpenTargetArgs();
        args.url = URL;

        PubSub.Get().Publish(Topics.OPEN_TARGET, args);
    }
}
