@using JobScraper.Model.Filter;
@using JobScraper.ViewModel.EventArgs;
@using JobScraper.ViewModel;
@using JobScraper.Utils;

<form class="input-group input-group-sm" style="padding: 10px;" @onsubmit="AddKeyword">
    <input class="form-control" @bind-value="keywordInput" type="text" placeholder="Keyword to filter for" />
    <button class="btn btn-primary" type="submit">Add</button>
</form>
<div class="keyword-list">
    @foreach (Keyword keyword in keywordFilter)
    {
        <a class="keyword" href="#" @onclick="() => RemoveKeyword(keyword.text)">

        @if (keyword.type == Keyword.Type.Must)
        {
            <span class="badge bg-success">@keyword.text</span>
        }
        else if (keyword.type == Keyword.Type.Should)
        {
            <span class="badge bg-warning">@keyword.text</span>
        }
        else if (keyword.type == Keyword.Type.Cannot)
        {
            <span class="badge bg-danger">@keyword.text</span>
        }

        </a>
    }
</div>

@code {
    public string keywordInput { get; set; }
    public List<Keyword> keywordFilter = new List<Keyword>();

    private PubSub.Callback addedKeyword;
    private PubSub.Callback removedKeyword;

    protected override async Task OnInitializedAsync()
    {
        PubSub.Get().Subscribe(Topics.ADDED_KEYWORD, AddedKeyword);
        PubSub.Get().Subscribe(Topics.REMOVED_KEYWORD, RemovedKeyword);
    }

    private async void AddKeyword()
    {
        FilterArgs args = new FilterArgs();

        args.keyword = new Keyword {
            text = keywordInput,
            type = Keyword.Type.None
        };

        switch (args.keyword.text[0])
        {
            case '?':
                args.keyword.text = args.keyword.text.Substring(1);
                args.keyword.type = Keyword.Type.Should;
                break;
            case '!':
                args.keyword.text = args.keyword.text.Substring(1);
                args.keyword.type = Keyword.Type.Cannot;
                break;
            default:
                args.keyword.type = Keyword.Type.Must;
                break;
        }

        keywordInput = string.Empty;

        PubSub.Get().Publish(Topics.ADD_KEYWORD, args);
    }

    private async void RemoveKeyword(string keyword)
    {
        FilterArgs args = new FilterArgs();
        args.keyword = new Keyword
        {
            text = keyword    
        };

        PubSub.Get().Publish(Topics.REMOVE_KEYWORD, args);
    }

    private void AddedKeyword(dynamic data)
    {
        keywordFilter.Add((data as FilterArgs).keyword);
    }

    private void RemovedKeyword(dynamic data)
    {
        FilterArgs args = data as FilterArgs;
        Keyword keyword = keywordFilter.Single(k => k.text == args.keyword.text);
        keywordFilter.Remove(keyword);
    }
}