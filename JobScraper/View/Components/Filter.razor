@using JobScraper.Model.Filter;
@using JobScraper.ViewModel.EventArgs;
@using JobScraper.ViewModel;

<form class="input-group input-group-sm" style="padding: 10px;">
    <input class="form-control" @bind-value="keywordInput" type="text" placeholder="Keyword to filter for" />
    <button class="btn btn-primary" type="reset" @onclick="AddKeyword">Add</button>
</form>
<div class="keyword-list">
    @foreach (Keyword keyword in keywordFilter)
    {
        <a class="keyword" href="#" @onclick="() => RemoveKeyword(keyword.text)">

        @if (keyword.type == Keyword.Type.Must)
        {
            <span class="badge bg-success">@keyword.text</span>
        }
        else if (keyword.type == Keyword.Type.Should)
        {
            <span class="badge bg-warning">@keyword.text</span>
        }
        else if (keyword.type == Keyword.Type.Cannot)
        {
            <span class="badge bg-danger">@keyword.text</span>
        }

        </a>
    }
</div>

@code {
    [Parameter]
    public MainViewModel viewModel { get; set; }

    public EventCallback<FilterArgs> AddKeywordCallback { get; set; }
    public EventCallback<FilterArgs> RemoveKeywordCallback { get; set; }

    public string keywordInput { get; set; }
    public List<Keyword> keywordFilter = new List<Keyword>();

    protected override async Task OnInitializedAsync()
    {
        // ViewModel -> Component
        viewModel.OnKeywordRemoved += KeywordRemovedHandler;
        viewModel.OnKeywordAdded += KeywordAddedHandler;

        // Component -> ViewModel
        AddKeywordCallback = viewModel.AddKeywordCallback;
        RemoveKeywordCallback = viewModel.RemoveKeywordCallback;
    }

    // Component -> ViewModel
    private async void AddKeyword()
    {
        FilterArgs args = new FilterArgs();

        args.keyword = new Keyword {
            text = keywordInput,
            type = Keyword.Type.None
        };

        switch (args.keyword.text[0])
        {
            case '?':
                args.keyword.text = args.keyword.text.Substring(1);
                args.keyword.type = Keyword.Type.Should;
                break;
            case '!':
                args.keyword.text = args.keyword.text.Substring(1);
                args.keyword.type = Keyword.Type.Cannot;
                break;
            default:
                args.keyword.type = Keyword.Type.Must;
                break;
        }

        keywordInput = string.Empty;

        await AddKeywordCallback.InvokeAsync(args);
    }

    private async void RemoveKeyword(string keyword)
    {
        FilterArgs args = new FilterArgs();
        args.keyword = new Keyword
        {
            text = keyword    
        };

        await RemoveKeywordCallback.InvokeAsync(args);
    }

    // ViewModel -> Component
    private void KeywordAddedHandler(object sender, FilterArgs args)
    {
        keywordFilter.Add(args.keyword);
    }

    private void KeywordRemovedHandler(object sender, FilterArgs args)
    {
        Keyword keyword = keywordFilter.Single(k => k.text == args.keyword.text);
        keywordFilter.Remove(keyword);
    }
}
